{"ast":null,"code":"// import * as yup from 'yup';\n\n// const schema = yup.object().shape({\n//   firstname: yup\n//     .string()\n//     .notOneOf(\n//       [\n//         'firstname',\n//         'lastname',\n//         'unknown',\n//         'first_name',\n//         'last_name',\n//         'anonyme',\n//         'user',\n//         'admin',\n//         'name',\n//         'nom',\n//         'prénom',\n//         'test'\n//       ],\n//       'Ce prénom n\\'est pas valide'\n//     )\n//     .matches(\n//       /^[^0-9\\s]{2,}$/,\n//       'Le prénom ne doit pas contenir de chiffre, un seul caractère ou aucune voyelle'\n//     )\n//     .matches(\n//       /^((?!(.)\\1\\1).)*$/,\n//       'Le prénom ne doit pas contenir 3 caractères répétitifs'\n//     ),\n//   lastname: yup\n//     .string()\n//     .notOneOf(\n//       [\n//         'firstname',\n//         'lastname',\n//         'unknown',\n//         'first_name',\n//         'last_name',\n//         'anonyme',\n//         'user',\n//         'admin',\n//         'name',\n//         'nom',\n//         'prénom',\n//         'test'\n//       ],\n//       'Ce nom n\\'est pas valide'\n//     )\n//     .matches(\n//       /^[^0-9\\s]{2,}$/,\n//       'Le nom ne doit pas contenir de chiffre, un seul caractère ou aucune voyelle'\n//     )\n//     .matches(\n//       /^((?!(.)\\1\\1).)*$/,\n//       'Le nom ne doit pas contenir 3 caractères répétitifs'\n//     )\n//     .test(\n//       'unique',\n//       'Le nom et le prénom doivent être différents',\n//       function (value) {\n//         const { firstname } = this.parent;\n//         return firstname !== value;\n//       }\n//     ),\n//   email: yup\n//     .string()\n//     .email('L\\'adresse email n\\'est pas valide')\n//     .required('L\\'adresse email est requise'),\n//   birthdate: yup\n//     .date()\n//     .max(new Date(new Date().getFullYear() - 18, 11, 31), 'Vous devez être majeur pour acheter sur ce site'),\n//   adresse: yup.string().required('L\\'adresse est requise'),\n//   ville: yup.string().required('La ville est requise'),\n//   codePostal: yup\n//     .string()\n//     .matches(/^\\d{5}(?:[-\\s]\\d{4})?$/, 'Le code postal n\\'est pas valide')\n//     .required('Le code postal est requis'),\n//   pays: yup.string().required('Le pays est requis')\n// });\n\n// const Form = () => {\n//   const [formValues, setFormValues] = useState({\n//     firstname: '',\n//     lastname: '',\n//     email: '',\n//     birthdate: '',\n//     adresse: '',\n//     ville: '',\n//     codePostal: '',\n//     pays: ''\n//   });\n//   const [formErrors, setFormErrors] = useState({});\n\n//   const handleChange = (event) => {\n//     const { name, value } = event.target;\n//     setFormValues((prevState) => ({ ...prevState, [name]: value }));\n//   };\n//   const handleSubmit = async (data) => {\n//     try {\n//       await schema.validate(data, { abortEarly: false });\n//       console.log(data);\n//       // Envoi des données vers le serveur\n//     } catch (errors) {\n//       const validationErrors = {};\n//       errors.inner.forEach((error) => {\n//         validationErrors[error.path] = error.message;\n//       });\n//       console.log(validationErrors);\n//       // Affichage des erreurs de validation\n//     }\n//   };\n\n// }\n\n//   function Formulaire() {\n//     const { register, handleSubmit, errors } = useForm();\n\n//     return (\n//       <form onSubmit={handleSubmit(handleSubmit)}>\n//         <label htmlFor=\"firstname\">Nom :</label>\n//         <input id=\"firstname\" name=\"firstname\" ref={register} />\n//         {errors.firstname && <p>{errors.firstname.message}</p>}\n\n//         <label htmlFor=\"lastname\">Prénom :</label>\n//         <input id=\"lastname\" name=\"lastname\" ref={register} />\n//         {errors.lastname && <p>{errors.lastname.message}</p>}\n\n//         <label htmlFor=\"address\">Adresse :</label>\n//         <input id=\"address\" name=\"address\" ref={register} />\n//         {errors.address && <p>{errors.address.message}</p>}\n\n//         <label htmlFor=\"city\">Ville :</label>\n//         <input id=\"city\" name=\"city\" ref={register} />\n//         {errors.city && <p>{errors.city.message}</p>}\n\n//         <label htmlFor=\"zipcode\">Code postal :</label>\n//         <input id=\"zipcode\" name=\"zipcode\" ref={register} />\n//         {errors.zipcode && <p>{errors.zipcode.message}</p>}\n\n//         <label htmlFor=\"country\">Pays :</label>\n//         <input id=\"country\" name=\"country\" ref={register} />\n//         {errors.country && <p>{errors.country.message}</p>}\n\n//         <button type=\"submit\">Envoyer</button>\n//       </form>\n//     );\n// export default Formulaire;\n//   }","map":{"version":3,"names":[],"sources":["C:/Users/Pro/Desktop/cours HTML CSS/sitr b2B/shop/src/Panier/Formulaire/Formulaire.js"],"sourcesContent":["// import * as yup from 'yup';\r\n\r\n// const schema = yup.object().shape({\r\n//   firstname: yup\r\n//     .string()\r\n//     .notOneOf(\r\n//       [\r\n//         'firstname',\r\n//         'lastname',\r\n//         'unknown',\r\n//         'first_name',\r\n//         'last_name',\r\n//         'anonyme',\r\n//         'user',\r\n//         'admin',\r\n//         'name',\r\n//         'nom',\r\n//         'prénom',\r\n//         'test'\r\n//       ],\r\n//       'Ce prénom n\\'est pas valide'\r\n//     )\r\n//     .matches(\r\n//       /^[^0-9\\s]{2,}$/,\r\n//       'Le prénom ne doit pas contenir de chiffre, un seul caractère ou aucune voyelle'\r\n//     )\r\n//     .matches(\r\n//       /^((?!(.)\\1\\1).)*$/,\r\n//       'Le prénom ne doit pas contenir 3 caractères répétitifs'\r\n//     ),\r\n//   lastname: yup\r\n//     .string()\r\n//     .notOneOf(\r\n//       [\r\n//         'firstname',\r\n//         'lastname',\r\n//         'unknown',\r\n//         'first_name',\r\n//         'last_name',\r\n//         'anonyme',\r\n//         'user',\r\n//         'admin',\r\n//         'name',\r\n//         'nom',\r\n//         'prénom',\r\n//         'test'\r\n//       ],\r\n//       'Ce nom n\\'est pas valide'\r\n//     )\r\n//     .matches(\r\n//       /^[^0-9\\s]{2,}$/,\r\n//       'Le nom ne doit pas contenir de chiffre, un seul caractère ou aucune voyelle'\r\n//     )\r\n//     .matches(\r\n//       /^((?!(.)\\1\\1).)*$/,\r\n//       'Le nom ne doit pas contenir 3 caractères répétitifs'\r\n//     )\r\n//     .test(\r\n//       'unique',\r\n//       'Le nom et le prénom doivent être différents',\r\n//       function (value) {\r\n//         const { firstname } = this.parent;\r\n//         return firstname !== value;\r\n//       }\r\n//     ),\r\n//   email: yup\r\n//     .string()\r\n//     .email('L\\'adresse email n\\'est pas valide')\r\n//     .required('L\\'adresse email est requise'),\r\n//   birthdate: yup\r\n//     .date()\r\n//     .max(new Date(new Date().getFullYear() - 18, 11, 31), 'Vous devez être majeur pour acheter sur ce site'),\r\n//   adresse: yup.string().required('L\\'adresse est requise'),\r\n//   ville: yup.string().required('La ville est requise'),\r\n//   codePostal: yup\r\n//     .string()\r\n//     .matches(/^\\d{5}(?:[-\\s]\\d{4})?$/, 'Le code postal n\\'est pas valide')\r\n//     .required('Le code postal est requis'),\r\n//   pays: yup.string().required('Le pays est requis')\r\n// });\r\n\r\n// const Form = () => {\r\n//   const [formValues, setFormValues] = useState({\r\n//     firstname: '',\r\n//     lastname: '',\r\n//     email: '',\r\n//     birthdate: '',\r\n//     adresse: '',\r\n//     ville: '',\r\n//     codePostal: '',\r\n//     pays: ''\r\n//   });\r\n//   const [formErrors, setFormErrors] = useState({});\r\n\r\n//   const handleChange = (event) => {\r\n//     const { name, value } = event.target;\r\n//     setFormValues((prevState) => ({ ...prevState, [name]: value }));\r\n//   };\r\n//   const handleSubmit = async (data) => {\r\n//     try {\r\n//       await schema.validate(data, { abortEarly: false });\r\n//       console.log(data);\r\n//       // Envoi des données vers le serveur\r\n//     } catch (errors) {\r\n//       const validationErrors = {};\r\n//       errors.inner.forEach((error) => {\r\n//         validationErrors[error.path] = error.message;\r\n//       });\r\n//       console.log(validationErrors);\r\n//       // Affichage des erreurs de validation\r\n//     }\r\n//   };\r\n\r\n// }\r\n  \r\n//   function Formulaire() {\r\n//     const { register, handleSubmit, errors } = useForm();\r\n  \r\n//     return (\r\n//       <form onSubmit={handleSubmit(handleSubmit)}>\r\n//         <label htmlFor=\"firstname\">Nom :</label>\r\n//         <input id=\"firstname\" name=\"firstname\" ref={register} />\r\n//         {errors.firstname && <p>{errors.firstname.message}</p>}\r\n  \r\n//         <label htmlFor=\"lastname\">Prénom :</label>\r\n//         <input id=\"lastname\" name=\"lastname\" ref={register} />\r\n//         {errors.lastname && <p>{errors.lastname.message}</p>}\r\n  \r\n//         <label htmlFor=\"address\">Adresse :</label>\r\n//         <input id=\"address\" name=\"address\" ref={register} />\r\n//         {errors.address && <p>{errors.address.message}</p>}\r\n  \r\n//         <label htmlFor=\"city\">Ville :</label>\r\n//         <input id=\"city\" name=\"city\" ref={register} />\r\n//         {errors.city && <p>{errors.city.message}</p>}\r\n  \r\n//         <label htmlFor=\"zipcode\">Code postal :</label>\r\n//         <input id=\"zipcode\" name=\"zipcode\" ref={register} />\r\n//         {errors.zipcode && <p>{errors.zipcode.message}</p>}\r\n  \r\n//         <label htmlFor=\"country\">Pays :</label>\r\n//         <input id=\"country\" name=\"country\" ref={register} />\r\n//         {errors.country && <p>{errors.country.message}</p>}\r\n  \r\n//         <button type=\"submit\">Envoyer</button>\r\n//       </form>\r\n//     );\r\n// export default Formulaire;\r\n//   }"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}